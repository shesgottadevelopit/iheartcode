// mixins

//  Responsive font sizing. The size of the font will scale with the viewport based on the information that you provide it. Additional properties may be adding for things like padding.
@mixin fluid-type(
$font-size-min,
$font-size-max,
$properties: font-size,
$vw-min: 20rem, //320px,
$vw-max: 41.25rem //660px
) {

	@if(
    unitless($font-size-min) or
    unitless($font-size-max) or
    unitless($vw-min) or
    unitless($vw-max)
	) {
		@error "All min and max properties must be provided with a unit (e.g.: px)";
	}

	@if(
    unit($font-size-min) == unit($font-size-max) and
    unit($font-size-min) == unit($vw-min) and
    unit($font-size-min) == unit($vw-max)
	) {
		@each $property in $properties {
			#{$property}: $font-size-min;
		}

		@media screen and (min-width: $vw-min) {
			@each $property in $properties {
				#{$property}: calc(#{$font-size-min} + #{strip-unit($font-size-max - $font-size-min)} * (100vw - #{$vw-min}) / #{strip-unit($vw-max - $vw-min)});
			}
		}

		@media screen and (min-width: $vw-max) {
			@each $property in $properties {
				#{$property}: $font-size-max;
			}
		}
	} @else {
		@error "All units must be the same. Incompatible units were passed:
		#{unit($font-size-min)}, #{unit($font-size-max)}, #{unit($vw-min)},
		#{unit($vw-max)}";
	}
}


@function strip-unit($number) {
	@if type-of($number) == 'number' and not unitless($number) {
		@return $number / ($number * 0 + 1);
	}

	@return $number;
}
